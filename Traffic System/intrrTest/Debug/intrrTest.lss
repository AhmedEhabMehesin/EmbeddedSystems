
intrrTest.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000004a0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000514  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000012  00800060  00800060  00000514  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000514  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000544  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000f8  00000000  00000000  00000580  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000de8  00000000  00000000  00000678  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008b8  00000000  00000000  00001460  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000094a  00000000  00000000  00001d18  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  00002664  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000466  00000000  00000000  000027e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000284  00000000  00000000  00002c4a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00002ece  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 a9 01 	jmp	0x352	; 0x352 <__vector_1>
   8:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
   c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  10:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  14:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  18:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  1c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  20:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  24:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  28:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  2c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  30:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  34:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  38:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  3c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  40:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  44:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  48:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  4c:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>
  50:	0c 94 3c 00 	jmp	0x78	; 0x78 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_clear_bss>:
  60:	20 e0       	ldi	r18, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	01 c0       	rjmp	.+2      	; 0x6a <.do_clear_bss_start>

00000068 <.do_clear_bss_loop>:
  68:	1d 92       	st	X+, r1

0000006a <.do_clear_bss_start>:
  6a:	a2 37       	cpi	r26, 0x72	; 114
  6c:	b2 07       	cpc	r27, r18
  6e:	e1 f7       	brne	.-8      	; 0x68 <.do_clear_bss_loop>
  70:	0e 94 92 01 	call	0x324	; 0x324 <main>
  74:	0c 94 4e 02 	jmp	0x49c	; 0x49c <_exit>

00000078 <__bad_interrupt>:
  78:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000007c <APP_init>:
 * Created: 9/14/2022 10:28:05 PM
 *  Author: Ahmed
 */ 
#include "Application.h"
void APP_init(){
	INT_init();
  7c:	0e 94 99 01 	call	0x332	; 0x332 <INT_init>
	traffic_init();
  80:	0e 94 57 00 	call	0xae	; 0xae <traffic_init>
  84:	08 95       	ret

00000086 <APP_run>:
}
void APP_run(){
	uint8_t Turn;
	while (1)
	{
		if (GET_INT0()==1){
  86:	0e 94 a3 01 	call	0x346	; 0x346 <GET_INT0>
  8a:	81 30       	cpi	r24, 0x01	; 1
  8c:	61 f4       	brne	.+24     	; 0xa6 <APP_run+0x20>
			
			if (Turn==0)
  8e:	c1 11       	cpse	r28, r1
  90:	04 c0       	rjmp	.+8      	; 0x9a <APP_run+0x14>
			{
				Turn=1;
				traffic_ped(READY,Normal);
  92:	61 e0       	ldi	r22, 0x01	; 1
  94:	0e 94 fe 00 	call	0x1fc	; 0x1fc <traffic_ped>
	{
		if (GET_INT0()==1){
			
			if (Turn==0)
			{
				Turn=1;
  98:	c1 e0       	ldi	r28, 0x01	; 1
				traffic_ped(READY,Normal);
			}
			
			traffic_ped(WAIT,mode);
  9a:	60 91 6e 00 	lds	r22, 0x006E	; 0x80006e <mode>
  9e:	82 e0       	ldi	r24, 0x02	; 2
  a0:	0e 94 fe 00 	call	0x1fc	; 0x1fc <traffic_ped>
  a4:	f0 cf       	rjmp	.-32     	; 0x86 <APP_run>
		}
		else{traffic_normal(); Turn=0;}
  a6:	0e 94 a6 00 	call	0x14c	; 0x14c <traffic_normal>
  aa:	c0 e0       	ldi	r28, 0x00	; 0
  ac:	ec cf       	rjmp	.-40     	; 0x86 <APP_run>

000000ae <traffic_init>:
 * Created: 9/14/2022 6:29:56 PM
 *  Author: Ahmed
 */ 
#include "traffic.h"
void traffic_init(){
traffic_state=READY;
  ae:	81 e0       	ldi	r24, 0x01	; 1
  b0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
traffic_color=RED;
  b4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <traffic_color>
color_direction=-1;
  b8:	8f ef       	ldi	r24, 0xFF	; 255
  ba:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <color_direction>
SET_BIT(DDRA,0);
  be:	8a b3       	in	r24, 0x1a	; 26
  c0:	81 60       	ori	r24, 0x01	; 1
  c2:	8a bb       	out	0x1a, r24	; 26
SET_BIT(DDRA,1);
  c4:	8a b3       	in	r24, 0x1a	; 26
  c6:	82 60       	ori	r24, 0x02	; 2
  c8:	8a bb       	out	0x1a, r24	; 26
SET_BIT(DDRA,2);
  ca:	8a b3       	in	r24, 0x1a	; 26
  cc:	84 60       	ori	r24, 0x04	; 4
  ce:	8a bb       	out	0x1a, r24	; 26

SET_BIT(DDRB,0);
  d0:	87 b3       	in	r24, 0x17	; 23
  d2:	81 60       	ori	r24, 0x01	; 1
  d4:	87 bb       	out	0x17, r24	; 23
SET_BIT(DDRB,1);
  d6:	87 b3       	in	r24, 0x17	; 23
  d8:	82 60       	ori	r24, 0x02	; 2
  da:	87 bb       	out	0x17, r24	; 23
SET_BIT(DDRB,2);
  dc:	87 b3       	in	r24, 0x17	; 23
  de:	84 60       	ori	r24, 0x04	; 4
  e0:	87 bb       	out	0x17, r24	; 23
  e2:	08 95       	ret

000000e4 <LED>:
}

void LED(uint8_t *PORT,uint8_t COL, uint8_t SIM){
  e4:	fc 01       	movw	r30, r24
	
	if (COL==RED)
  e6:	61 30       	cpi	r22, 0x01	; 1
  e8:	39 f4       	brne	.+14     	; 0xf8 <LED+0x14>
	{
		
		SET_BIT(*PORT,0);
  ea:	80 81       	ld	r24, Z
  ec:	81 60       	ori	r24, 0x01	; 1
  ee:	80 83       	st	Z, r24
		if (SIM==0){
  f0:	41 11       	cpse	r20, r1
  f2:	02 c0       	rjmp	.+4      	; 0xf8 <LED+0x14>
			CLR_BIT(*PORT,1);
			CLR_BIT(*PORT,2);
  f4:	89 7f       	andi	r24, 0xF9	; 249
  f6:	80 83       	st	Z, r24
		}
		
	}
	if (COL==YEL)
  f8:	62 30       	cpi	r22, 0x02	; 2
  fa:	39 f4       	brne	.+14     	; 0x10a <LED+0x26>
	{
		SET_BIT(*PORT,1);
  fc:	80 81       	ld	r24, Z
  fe:	82 60       	ori	r24, 0x02	; 2
 100:	80 83       	st	Z, r24
		if (SIM==0){
 102:	41 11       	cpse	r20, r1
 104:	02 c0       	rjmp	.+4      	; 0x10a <LED+0x26>
			CLR_BIT(*PORT,0);
			CLR_BIT(*PORT,2);
 106:	8a 7f       	andi	r24, 0xFA	; 250
 108:	80 83       	st	Z, r24
		}
	}
	if (COL==GRE)
 10a:	63 30       	cpi	r22, 0x03	; 3
 10c:	39 f4       	brne	.+14     	; 0x11c <LED+0x38>
	{
		SET_BIT(*PORT,2);
 10e:	80 81       	ld	r24, Z
 110:	84 60       	ori	r24, 0x04	; 4
 112:	80 83       	st	Z, r24
		if (SIM==0){
 114:	41 11       	cpse	r20, r1
 116:	02 c0       	rjmp	.+4      	; 0x11c <LED+0x38>
			CLR_BIT(*PORT,0);
			CLR_BIT(*PORT,1);
 118:	8c 7f       	andi	r24, 0xFC	; 252
 11a:	80 83       	st	Z, r24
		}
	}
	if (COL==BLANK)
 11c:	64 30       	cpi	r22, 0x04	; 4
 11e:	39 f4       	brne	.+14     	; 0x12e <LED+0x4a>
	{
		CLR_BIT(*PORT,1);
 120:	80 81       	ld	r24, Z
 122:	8d 7f       	andi	r24, 0xFD	; 253
 124:	80 83       	st	Z, r24
		if (SIM==0){
 126:	41 11       	cpse	r20, r1
 128:	02 c0       	rjmp	.+4      	; 0x12e <LED+0x4a>
			CLR_BIT(*PORT,0);
			CLR_BIT(*PORT,2);
 12a:	8a 7f       	andi	r24, 0xFA	; 250
 12c:	80 83       	st	Z, r24
 12e:	08 95       	ret

00000130 <CAR_LED>:
		}
	}
}
void CAR_LED(uint8_t COL,uint8_t SIM){
 130:	46 2f       	mov	r20, r22
	LED(&CAR,COL,SIM);
 132:	68 2f       	mov	r22, r24
 134:	8b e3       	ldi	r24, 0x3B	; 59
 136:	90 e0       	ldi	r25, 0x00	; 0
 138:	0e 94 72 00 	call	0xe4	; 0xe4 <LED>
 13c:	08 95       	ret

0000013e <PED_LED>:
}
void PED_LED(uint8_t COL,uint8_t SIM){
 13e:	46 2f       	mov	r20, r22
	LED(&PED,COL,SIM);
 140:	68 2f       	mov	r22, r24
 142:	88 e3       	ldi	r24, 0x38	; 56
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0e 94 72 00 	call	0xe4	; 0xe4 <LED>
 14a:	08 95       	ret

0000014c <traffic_normal>:
}
void traffic_normal(){
	
	if (traffic_state==READY){
 14c:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 150:	81 30       	cpi	r24, 0x01	; 1
 152:	c9 f4       	brne	.+50     	; 0x186 <traffic_normal+0x3a>
		
		if ((traffic_color == RED) ||  (traffic_color == GRE))
 154:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <traffic_color>
 158:	81 30       	cpi	r24, 0x01	; 1
 15a:	11 f0       	breq	.+4      	; 0x160 <traffic_normal+0x14>
 15c:	83 30       	cpi	r24, 0x03	; 3
 15e:	29 f4       	brne	.+10     	; 0x16a <traffic_normal+0x1e>
		{
			timer_start(5,s);
 160:	62 e0       	ldi	r22, 0x02	; 2
 162:	85 e0       	ldi	r24, 0x05	; 5
 164:	90 e0       	ldi	r25, 0x00	; 0
 166:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <timer_start>
			
		}
		if ((traffic_color==YEL)||(traffic_color==BLANK))
 16a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <traffic_color>
 16e:	82 30       	cpi	r24, 0x02	; 2
 170:	11 f0       	breq	.+4      	; 0x176 <traffic_normal+0x2a>
 172:	84 30       	cpi	r24, 0x04	; 4
 174:	29 f4       	brne	.+10     	; 0x180 <traffic_normal+0x34>
		{
			
			timer_start(500,ms);
 176:	61 e0       	ldi	r22, 0x01	; 1
 178:	84 ef       	ldi	r24, 0xF4	; 244
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <timer_start>
		}
	
		traffic_state=WAIT;
 180:	82 e0       	ldi	r24, 0x02	; 2
 182:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		
	}
		
		if (timer_check()==(10)){
 186:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <timer_check>
 18a:	8a 30       	cpi	r24, 0x0A	; 10
 18c:	89 f5       	brne	.+98     	; 0x1f0 <traffic_normal+0xa4>
			
			if ((traffic_color==YEL)||(traffic_color==BLANK)){
 18e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <traffic_color>
 192:	82 30       	cpi	r24, 0x02	; 2
 194:	11 f0       	breq	.+4      	; 0x19a <traffic_normal+0x4e>
 196:	84 30       	cpi	r24, 0x04	; 4
 198:	99 f4       	brne	.+38     	; 0x1c0 <traffic_normal+0x74>
				blinker++;
 19a:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <blinker>
 19e:	9f 5f       	subi	r25, 0xFF	; 255
 1a0:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <blinker>
				traffic_color = ((traffic_color==YEL)? BLANK:YEL);
 1a4:	82 30       	cpi	r24, 0x02	; 2
 1a6:	11 f4       	brne	.+4      	; 0x1ac <traffic_normal+0x60>
 1a8:	84 e0       	ldi	r24, 0x04	; 4
 1aa:	01 c0       	rjmp	.+2      	; 0x1ae <traffic_normal+0x62>
 1ac:	82 e0       	ldi	r24, 0x02	; 2
 1ae:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <traffic_color>
				if (blinker==10){
 1b2:	9a 30       	cpi	r25, 0x0A	; 10
 1b4:	29 f4       	brne	.+10     	; 0x1c0 <traffic_normal+0x74>
					blinker=0;
 1b6:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <blinker>
					traffic_color=YEL;
 1ba:	82 e0       	ldi	r24, 0x02	; 2
 1bc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <traffic_color>
				}
				
			}
			if (blinker==0){
 1c0:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <blinker>
 1c4:	81 11       	cpse	r24, r1
 1c6:	11 c0       	rjmp	.+34     	; 0x1ea <traffic_normal+0x9e>
			color_direction = (((traffic_color==RED)||(traffic_color==GRE))? (- color_direction ):color_direction);
 1c8:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <traffic_color>
 1cc:	81 30       	cpi	r24, 0x01	; 1
 1ce:	11 f0       	breq	.+4      	; 0x1d4 <traffic_normal+0x88>
 1d0:	83 30       	cpi	r24, 0x03	; 3
 1d2:	21 f4       	brne	.+8      	; 0x1dc <traffic_normal+0x90>
 1d4:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <color_direction>
 1d8:	91 95       	neg	r25
 1da:	02 c0       	rjmp	.+4      	; 0x1e0 <traffic_normal+0x94>
 1dc:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <color_direction>
 1e0:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <color_direction>
			traffic_color += color_direction;
 1e4:	89 0f       	add	r24, r25
 1e6:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <traffic_color>
			}
			traffic_state=READY;
 1ea:	81 e0       	ldi	r24, 0x01	; 1
 1ec:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
		}
	CAR_LED(traffic_color,0);	
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <traffic_color>
 1f6:	0e 94 98 00 	call	0x130	; 0x130 <CAR_LED>
 1fa:	08 95       	ret

000001fc <traffic_ped>:
}
void traffic_ped(uint8_t State,uint8_t Mode){
	mode=Mode;
 1fc:	60 93 6e 00 	sts	0x006E, r22	; 0x80006e <mode>
	if (traffic_state==READY || State==READY){
 200:	90 91 60 00 	lds	r25, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 204:	91 30       	cpi	r25, 0x01	; 1
 206:	19 f0       	breq	.+6      	; 0x20e <traffic_ped+0x12>
 208:	81 30       	cpi	r24, 0x01	; 1
 20a:	09 f0       	breq	.+2      	; 0x20e <traffic_ped+0x12>
 20c:	47 c0       	rjmp	.+142    	; 0x29c <traffic_ped+0xa0>
		State=WAIT;
	if (traffic_color==RED){
 20e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <traffic_color>
 212:	81 30       	cpi	r24, 0x01	; 1
 214:	81 f4       	brne	.+32     	; 0x236 <traffic_ped+0x3a>
		timer_start(5,s);
 216:	62 e0       	ldi	r22, 0x02	; 2
 218:	85 e0       	ldi	r24, 0x05	; 5
 21a:	90 e0       	ldi	r25, 0x00	; 0
 21c:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <timer_start>
		PED_LED(GRE,0);
 220:	60 e0       	ldi	r22, 0x00	; 0
 222:	83 e0       	ldi	r24, 0x03	; 3
 224:	0e 94 9f 00 	call	0x13e	; 0x13e <PED_LED>
		CAR_LED(RED,0);
 228:	60 e0       	ldi	r22, 0x00	; 0
 22a:	81 e0       	ldi	r24, 0x01	; 1
 22c:	0e 94 98 00 	call	0x130	; 0x130 <CAR_LED>
		mode=Pedmode;
 230:	82 e0       	ldi	r24, 0x02	; 2
 232:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <mode>
	}
	if ((traffic_color==YEL)||(traffic_color==BLANK)){
 236:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <traffic_color>
 23a:	82 30       	cpi	r24, 0x02	; 2
 23c:	11 f0       	breq	.+4      	; 0x242 <traffic_ped+0x46>
 23e:	84 30       	cpi	r24, 0x04	; 4
 240:	a1 f4       	brne	.+40     	; 0x26a <traffic_ped+0x6e>
		timer_start(500,ms);
 242:	61 e0       	ldi	r22, 0x01	; 1
 244:	84 ef       	ldi	r24, 0xF4	; 244
 246:	91 e0       	ldi	r25, 0x01	; 1
 248:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <timer_start>
		CAR_LED(traffic_color,0);
 24c:	60 e0       	ldi	r22, 0x00	; 0
 24e:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <traffic_color>
 252:	0e 94 98 00 	call	0x130	; 0x130 <CAR_LED>
		if (mode==Normal){PED_LED(RED,0);color_direction=-1;}
 256:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <mode>
 25a:	81 30       	cpi	r24, 0x01	; 1
 25c:	31 f4       	brne	.+12     	; 0x26a <traffic_ped+0x6e>
 25e:	60 e0       	ldi	r22, 0x00	; 0
 260:	0e 94 9f 00 	call	0x13e	; 0x13e <PED_LED>
 264:	8f ef       	ldi	r24, 0xFF	; 255
 266:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <color_direction>
		
		
	}
	if ((traffic_color==GRE)){
 26a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <traffic_color>
 26e:	83 30       	cpi	r24, 0x03	; 3
 270:	91 f4       	brne	.+36     	; 0x296 <traffic_ped+0x9a>
		if (mode==Normal){PED_LED(RED,0);}
 272:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <mode>
 276:	81 30       	cpi	r24, 0x01	; 1
 278:	19 f4       	brne	.+6      	; 0x280 <traffic_ped+0x84>
 27a:	60 e0       	ldi	r22, 0x00	; 0
 27c:	0e 94 9f 00 	call	0x13e	; 0x13e <PED_LED>
		PED_LED(RED,0);
 280:	60 e0       	ldi	r22, 0x00	; 0
 282:	81 e0       	ldi	r24, 0x01	; 1
 284:	0e 94 9f 00 	call	0x13e	; 0x13e <PED_LED>
		if (mode==Pedmode){
 288:	80 91 6e 00 	lds	r24, 0x006E	; 0x80006e <mode>
 28c:	82 30       	cpi	r24, 0x02	; 2
 28e:	19 f4       	brne	.+6      	; 0x296 <traffic_ped+0x9a>
		CLR_INT0();
 290:	0e 94 a6 01 	call	0x34c	; 0x34c <CLR_INT0>
		return 0;}
 294:	08 95       	ret
	}
	traffic_state=WAIT;
 296:	82 e0       	ldi	r24, 0x02	; 2
 298:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	if (timer_check()==(10)){
 29c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <timer_check>
 2a0:	8a 30       	cpi	r24, 0x0A	; 10
 2a2:	89 f5       	brne	.+98     	; 0x306 <traffic_ped+0x10a>
		if ((traffic_color==YEL)||(traffic_color==BLANK)){
 2a4:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <traffic_color>
 2a8:	82 30       	cpi	r24, 0x02	; 2
 2aa:	11 f0       	breq	.+4      	; 0x2b0 <traffic_ped+0xb4>
 2ac:	84 30       	cpi	r24, 0x04	; 4
 2ae:	99 f4       	brne	.+38     	; 0x2d6 <traffic_ped+0xda>
			
			blinker++;
 2b0:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <blinker>
 2b4:	9f 5f       	subi	r25, 0xFF	; 255
 2b6:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <blinker>
			traffic_color = ((traffic_color==YEL)? BLANK:YEL);
 2ba:	82 30       	cpi	r24, 0x02	; 2
 2bc:	11 f4       	brne	.+4      	; 0x2c2 <traffic_ped+0xc6>
 2be:	84 e0       	ldi	r24, 0x04	; 4
 2c0:	01 c0       	rjmp	.+2      	; 0x2c4 <traffic_ped+0xc8>
 2c2:	82 e0       	ldi	r24, 0x02	; 2
 2c4:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <traffic_color>
			if (blinker>=10){
 2c8:	9a 30       	cpi	r25, 0x0A	; 10
 2ca:	28 f0       	brcs	.+10     	; 0x2d6 <traffic_ped+0xda>
				blinker=0;
 2cc:	10 92 6d 00 	sts	0x006D, r1	; 0x80006d <blinker>
				traffic_color=YEL;
 2d0:	82 e0       	ldi	r24, 0x02	; 2
 2d2:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <traffic_color>
			}
			
		}
		if (blinker==0){
 2d6:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <blinker>
 2da:	81 11       	cpse	r24, r1
 2dc:	11 c0       	rjmp	.+34     	; 0x300 <traffic_ped+0x104>
			
			color_direction = (((traffic_color==RED)||(traffic_color==GRE))? (- color_direction ):color_direction);
 2de:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <traffic_color>
 2e2:	81 30       	cpi	r24, 0x01	; 1
 2e4:	11 f0       	breq	.+4      	; 0x2ea <traffic_ped+0xee>
 2e6:	83 30       	cpi	r24, 0x03	; 3
 2e8:	21 f4       	brne	.+8      	; 0x2f2 <traffic_ped+0xf6>
 2ea:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <color_direction>
 2ee:	91 95       	neg	r25
 2f0:	02 c0       	rjmp	.+4      	; 0x2f6 <traffic_ped+0xfa>
 2f2:	90 91 6f 00 	lds	r25, 0x006F	; 0x80006f <color_direction>
 2f6:	90 93 6f 00 	sts	0x006F, r25	; 0x80006f <color_direction>
			traffic_color += color_direction;
 2fa:	89 0f       	add	r24, r25
 2fc:	80 93 61 00 	sts	0x0061, r24	; 0x800061 <traffic_color>
		}
		traffic_state=READY;
 300:	81 e0       	ldi	r24, 0x01	; 1
 302:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
	}
	
	//if(blinker>0){PED_LED(traffic_color,1);}
	if (blinker>0){PED_LED(traffic_color,1);CAR_LED(traffic_color,1);}
 306:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <blinker>
 30a:	88 23       	and	r24, r24
 30c:	51 f0       	breq	.+20     	; 0x322 <traffic_ped+0x126>
 30e:	61 e0       	ldi	r22, 0x01	; 1
 310:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <traffic_color>
 314:	0e 94 9f 00 	call	0x13e	; 0x13e <PED_LED>
 318:	61 e0       	ldi	r22, 0x01	; 1
 31a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <traffic_color>
 31e:	0e 94 98 00 	call	0x130	; 0x130 <CAR_LED>
 322:	08 95       	ret

00000324 <main>:

#include "EUCAL/Traffic/traffic.h"
#include "MCAL/Interrupt/interrupts.h"
int main(void)
{
	APP_init();
 324:	0e 94 3e 00 	call	0x7c	; 0x7c <APP_init>
	APP_run();
 328:	0e 94 43 00 	call	0x86	; 0x86 <APP_run>
    
}
 32c:	80 e0       	ldi	r24, 0x00	; 0
 32e:	90 e0       	ldi	r25, 0x00	; 0
 330:	08 95       	ret

00000332 <INT_init>:
 * Created: 9/14/2022 2:40:30 PM
 *  Author: Ahmed
 */ 
#include "interrupts.h"
void INT_init(){
	SEI();
 332:	8f b7       	in	r24, 0x3f	; 63
 334:	80 68       	ori	r24, 0x80	; 128
 336:	8f bf       	out	0x3f, r24	; 63
	MCUCR |= (1<<0) | (1<<1);
 338:	85 b7       	in	r24, 0x35	; 53
 33a:	83 60       	ori	r24, 0x03	; 3
 33c:	85 bf       	out	0x35, r24	; 53
	GICR |= (1<<6);
 33e:	8b b7       	in	r24, 0x3b	; 59
 340:	80 64       	ori	r24, 0x40	; 64
 342:	8b bf       	out	0x3b, r24	; 59
 344:	08 95       	ret

00000346 <GET_INT0>:
}
uint8_t GET_INT0(){
	return INT0_STATE;
}
 346:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <INT0_STATE>
 34a:	08 95       	ret

0000034c <CLR_INT0>:
void CLR_INT0(){
	INT0_STATE=0;
 34c:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <INT0_STATE>
 350:	08 95       	ret

00000352 <__vector_1>:
}
ISR(INT0){
 352:	1f 92       	push	r1
 354:	0f 92       	push	r0
 356:	0f b6       	in	r0, 0x3f	; 63
 358:	0f 92       	push	r0
 35a:	11 24       	eor	r1, r1
 35c:	8f 93       	push	r24
	INT0_STATE=1;
 35e:	81 e0       	ldi	r24, 0x01	; 1
 360:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <INT0_STATE>

 364:	8f 91       	pop	r24
 366:	0f 90       	pop	r0
 368:	0f be       	out	0x3f, r0	; 63
 36a:	0f 90       	pop	r0
 36c:	1f 90       	pop	r1
 36e:	18 95       	reti

00000370 <calc>:
 */ 
#include "timer.h"
uint8_t initial=0;
uint32_t overflows=0;
uint32_t ofcounter=0;
void calc(uint16_t amount, uint8_t unit){
 370:	0f 93       	push	r16
 372:	1f 93       	push	r17
	uint32_t us_amount=1;
	us_amount=((unit==ms)? 1000:us_amount);
 374:	61 30       	cpi	r22, 0x01	; 1
 376:	29 f0       	breq	.+10     	; 0x382 <calc+0x12>
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	40 e0       	ldi	r20, 0x00	; 0
 37e:	50 e0       	ldi	r21, 0x00	; 0
 380:	04 c0       	rjmp	.+8      	; 0x38a <calc+0x1a>
 382:	28 ee       	ldi	r18, 0xE8	; 232
 384:	33 e0       	ldi	r19, 0x03	; 3
 386:	40 e0       	ldi	r20, 0x00	; 0
 388:	50 e0       	ldi	r21, 0x00	; 0
	us_amount=((unit==s)?  1000000:us_amount);
 38a:	62 30       	cpi	r22, 0x02	; 2
 38c:	21 f4       	brne	.+8      	; 0x396 <calc+0x26>
 38e:	20 e4       	ldi	r18, 0x40	; 64
 390:	32 e4       	ldi	r19, 0x42	; 66
 392:	4f e0       	ldi	r20, 0x0F	; 15
 394:	50 e0       	ldi	r21, 0x00	; 0
	us_amount *= amount;
 396:	dc 01       	movw	r26, r24
 398:	0e 94 34 02 	call	0x468	; 0x468 <__muluhisi3>
	overflows=((us_amount)/(256))+1;
 39c:	07 2f       	mov	r16, r23
 39e:	18 2f       	mov	r17, r24
 3a0:	29 2f       	mov	r18, r25
 3a2:	33 27       	eor	r19, r19
 3a4:	0f 5f       	subi	r16, 0xFF	; 255
 3a6:	1f 4f       	sbci	r17, 0xFF	; 255
 3a8:	2f 4f       	sbci	r18, 0xFF	; 255
 3aa:	3f 4f       	sbci	r19, 0xFF	; 255
 3ac:	00 93 66 00 	sts	0x0066, r16	; 0x800066 <overflows>
 3b0:	10 93 67 00 	sts	0x0067, r17	; 0x800067 <overflows+0x1>
 3b4:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <overflows+0x2>
 3b8:	30 93 69 00 	sts	0x0069, r19	; 0x800069 <overflows+0x3>
	initial=256-(us_amount % 256);
 3bc:	61 95       	neg	r22
 3be:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <initial>
	
}
 3c2:	1f 91       	pop	r17
 3c4:	0f 91       	pop	r16
 3c6:	08 95       	ret

000003c8 <timer_start>:
void timer_start(uint16_t amount, uint8_t unit){
	calc(amount,unit);
 3c8:	0e 94 b8 01 	call	0x370	; 0x370 <calc>
	TCCR0=0;
 3cc:	13 be       	out	0x33, r1	; 51
	ofcounter=0;
 3ce:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <ofcounter>
 3d2:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <ofcounter+0x1>
 3d6:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <ofcounter+0x2>
 3da:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <ofcounter+0x3>
	TIFR |=(1<<0);
 3de:	88 b7       	in	r24, 0x38	; 56
 3e0:	81 60       	ori	r24, 0x01	; 1
 3e2:	88 bf       	out	0x38, r24	; 56
	TCNT0=initial;
 3e4:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <initial>
 3e8:	82 bf       	out	0x32, r24	; 50
	TCCR0=1;
 3ea:	81 e0       	ldi	r24, 0x01	; 1
 3ec:	83 bf       	out	0x33, r24	; 51
 3ee:	08 95       	ret

000003f0 <timer_check>:
}
uint8_t timer_check(){
	
	if ((TIFR & (1<<0))==1){
 3f0:	08 b6       	in	r0, 0x38	; 56
 3f2:	00 fe       	sbrs	r0, 0
 3f4:	38 c0       	rjmp	.+112    	; 0x466 <__EEPROM_REGION_LENGTH__+0x66>
		if (ofcounter==overflows){
 3f6:	40 91 62 00 	lds	r20, 0x0062	; 0x800062 <ofcounter>
 3fa:	50 91 63 00 	lds	r21, 0x0063	; 0x800063 <ofcounter+0x1>
 3fe:	60 91 64 00 	lds	r22, 0x0064	; 0x800064 <ofcounter+0x2>
 402:	70 91 65 00 	lds	r23, 0x0065	; 0x800065 <ofcounter+0x3>
 406:	80 91 66 00 	lds	r24, 0x0066	; 0x800066 <overflows>
 40a:	90 91 67 00 	lds	r25, 0x0067	; 0x800067 <overflows+0x1>
 40e:	a0 91 68 00 	lds	r26, 0x0068	; 0x800068 <overflows+0x2>
 412:	b0 91 69 00 	lds	r27, 0x0069	; 0x800069 <overflows+0x3>
 416:	48 17       	cp	r20, r24
 418:	59 07       	cpc	r21, r25
 41a:	6a 07       	cpc	r22, r26
 41c:	7b 07       	cpc	r23, r27
 41e:	59 f4       	brne	.+22     	; 0x436 <__EEPROM_REGION_LENGTH__+0x36>
			ofcounter=0;
 420:	10 92 62 00 	sts	0x0062, r1	; 0x800062 <ofcounter>
 424:	10 92 63 00 	sts	0x0063, r1	; 0x800063 <ofcounter+0x1>
 428:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <ofcounter+0x2>
 42c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <ofcounter+0x3>
			TCCR0=0;
 430:	13 be       	out	0x33, r1	; 51
			return (10);
 432:	8a e0       	ldi	r24, 0x0A	; 10
 434:	08 95       	ret
		}
		TIFR |=(1<<0);
 436:	88 b7       	in	r24, 0x38	; 56
 438:	81 60       	ori	r24, 0x01	; 1
 43a:	88 bf       	out	0x38, r24	; 56
		ofcounter++;
 43c:	80 91 62 00 	lds	r24, 0x0062	; 0x800062 <ofcounter>
 440:	90 91 63 00 	lds	r25, 0x0063	; 0x800063 <ofcounter+0x1>
 444:	a0 91 64 00 	lds	r26, 0x0064	; 0x800064 <ofcounter+0x2>
 448:	b0 91 65 00 	lds	r27, 0x0065	; 0x800065 <ofcounter+0x3>
 44c:	01 96       	adiw	r24, 0x01	; 1
 44e:	a1 1d       	adc	r26, r1
 450:	b1 1d       	adc	r27, r1
 452:	80 93 62 00 	sts	0x0062, r24	; 0x800062 <ofcounter>
 456:	90 93 63 00 	sts	0x0063, r25	; 0x800063 <ofcounter+0x1>
 45a:	a0 93 64 00 	sts	0x0064, r26	; 0x800064 <ofcounter+0x2>
 45e:	b0 93 65 00 	sts	0x0065, r27	; 0x800065 <ofcounter+0x3>
		return (0);
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	08 95       	ret
	}
 466:	08 95       	ret

00000468 <__muluhisi3>:
 468:	0e 94 3f 02 	call	0x47e	; 0x47e <__umulhisi3>
 46c:	a5 9f       	mul	r26, r21
 46e:	90 0d       	add	r25, r0
 470:	b4 9f       	mul	r27, r20
 472:	90 0d       	add	r25, r0
 474:	a4 9f       	mul	r26, r20
 476:	80 0d       	add	r24, r0
 478:	91 1d       	adc	r25, r1
 47a:	11 24       	eor	r1, r1
 47c:	08 95       	ret

0000047e <__umulhisi3>:
 47e:	a2 9f       	mul	r26, r18
 480:	b0 01       	movw	r22, r0
 482:	b3 9f       	mul	r27, r19
 484:	c0 01       	movw	r24, r0
 486:	a3 9f       	mul	r26, r19
 488:	70 0d       	add	r23, r0
 48a:	81 1d       	adc	r24, r1
 48c:	11 24       	eor	r1, r1
 48e:	91 1d       	adc	r25, r1
 490:	b2 9f       	mul	r27, r18
 492:	70 0d       	add	r23, r0
 494:	81 1d       	adc	r24, r1
 496:	11 24       	eor	r1, r1
 498:	91 1d       	adc	r25, r1
 49a:	08 95       	ret

0000049c <_exit>:
 49c:	f8 94       	cli

0000049e <__stop_program>:
 49e:	ff cf       	rjmp	.-2      	; 0x49e <__stop_program>
